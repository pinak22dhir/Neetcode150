class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result=new ArrayList<>();
        if(s.length()==0){
            return result;
        }
        List<String> li=new ArrayList<>();
         rec(result,li,s,0);
         return result;
    }
    static void rec( List<List<String>> result,List<String> st,String s,int index){
        if(index==s.length()){
            result.add(new ArrayList<>(st));
         return;
        }
        for(int i=index;i<s.length();i++){
           String b=s.substring(index,i+1);
           if(palindrome(b)){
            st.add(b);
            rec(result,st,s,i+1);
            st.remove(st.size()-1);
           }
        }
    }
    static boolean palindrome(String s){
        int i=0;int j=s.length()-1;
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
}
